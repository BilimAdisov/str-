#include <stdio.h>
#include <string.h>

#include "s21_string.h"

#test test_s21_strlen
ck_assert_int_eq(s21_strlen("Hello"), strlen("Hello"));
ck_assert_int_eq(s21_strlen(""), strlen(""));


#test test_s21_strpbrk
ck_assert_str_eq(s21_strpbrk("Hello, World!", "W"), strpbrk("Hello, World!", "W"));
ck_assert_ptr_eq(s21_strpbrk("Hello, World!", "x"), strpbrk("Hello, World!", "x"));





#test test_s21_strstr
ck_assert_str_eq(\
                s21_strstr("Hello, World!", "World"), \
                strstr("Hello, World!", "World") \
                );
ck_assert_ptr_eq(s21_strstr("Hello, World!", "x"), strstr("Hello, World!", "x"));


#test test_s21_strchr
ck_assert_str_eq(s21_strchr("Hello, World!", 'W'), strchr("Hello, World!", 'W'));
ck_assert_ptr_eq(s21_strchr("Hello, World!", 'x'), strchr("Hello, World!", 'x'));


#test test_s21_strtok
char str[] = "Hello, World!";
char *token = s21_strtok(str, " ,!");
char *token2 = strtok(str, " ,!");
ck_assert_str_eq(token, token2);
token = s21_strtok(s21_NULL, " ,!");
ck_assert_str_eq(token, "World");
token = s21_strtok(s21_NULL, " ,!");
ck_assert_ptr_eq(token, s21_NULL);


#test test_s21_strtok_null
const char *delim = " ,.!?";
char *token;
token = s21_strtok(s21_NULL, delim);
ck_assert_ptr_eq(token, s21_NULL);



#test test_s21_strerror
ck_assert_str_eq(s21_strerror(0), "Error 0");
ck_assert_str_eq(s21_strerror(1), "Operation not permitted");
ck_assert_str_eq(s21_strerror(100), "Operation not supported on socket");


#test strncpy_test_1_1
char dest1[20];
char dest2[20];

ck_assert_str_eq(s21_strncpy(dest1, "Hello", 10), strncpy(dest2, "Hello", 10));
ck_assert_str_eq(dest1, dest2);


#test strncpy_test_1_3
char dest1[20];
char dest2[20];

ck_assert_str_eq(s21_strncpy(dest1, "Hello\0World", 10), strncpy(dest2, "Hello\0World", 10));
ck_assert_str_eq(dest1, dest2);


#test strncpy_test_1_4
char dest1[20];
char dest2[20];
ck_assert_str_eq(s21_strncpy(dest1, "", 10), strncpy(dest2, "", 10));
ck_assert_str_eq(dest1, dest2);



#test strncpy_test_1_5
char dest1[20] = {0};
char dest2[20] = {0};

ck_assert_str_eq(s21_strncpy(dest1, "Test", 10), strncpy(dest2, "Test", 10));
ck_assert_str_eq(dest1, dest2);


#test strcspn_test
ck_assert_int_eq(s21_strcspn("xyzbxz", "abc"), strcspn("xyzbxz", "abc")); 
ck_assert_int_eq(s21_strcspn("xyzbxz", "xyz"), strcspn("xyzbxz", "xyz"));
ck_assert_int_eq(s21_strcspn("xyzbxz", "no match"), strcspn("xyzbxz", "no match")); 
ck_assert_int_eq(s21_strcspn("xyzbxz", ""), strcspn("xyzbxz", "")); 
ck_assert_int_eq(s21_strcspn("", "abc"), strcspn("", "abc")); 
ck_assert_int_eq(s21_strcspn("", ""), strcspn("", "")); 
#test strncat_hello5
char* str2 = "hello";
char dest[20] = "lalal";
int n = 5;
ck_assert_str_eq(strncat(dest, str2, n), s21_strncat(dest, str2, n));

#test strncat_hello_world_3
char dest[20] = "Hello, ";
char src[] = "World!";
ck_assert_str_eq(strncat(dest, src, 3), s21_strncat(dest, src, 3));

#test strncat_hello_world_6
char dest[20] = "Hello, ";
char src[] = "World!";
ck_assert_str_eq(strncat(dest, src, 6), s21_strncat(dest, src, 6));


#test strncat_hello_world_10
char dest[20] = "Hello, ";
char src[] = "World!";
ck_assert_str_eq(strncat(dest, src, 10), s21_strncat(dest, src, 10));


#test strncat_empt_src
char dest[20] = "Hello, ";
ck_assert_str_eq(strncat(dest, "", 5), s21_strncat(dest, "", 5));


#test strncat_empt_dest
char dest[20] = "";
char src[] = "World!";
ck_assert_str_eq(strncat(dest, src, 6), s21_strncat(dest, src, 6));


#test strchr_test
char* string = "hello world";
char* string2 = "";
int ch = (int)'h';
int ch2 = (int)'\0';
ck_assert_ptr_eq(string, s21_strchr(string, ch));
ck_assert_ptr_eq(strchr(string2, ch), s21_strchr(string2, ch));
ck_assert_ptr_eq(strchr(string, ch2), s21_strchr(string, ch2));


#test strncmp_test_abc_abcde_3
char* abc = "abc";
char* abcde = "abcde";
ck_assert_int_eq(strncmp(abc, abcde, 3), s21_strncmp(abc, abcde, 3));

#test strncmp_test_empt_empt_0
char* empt = "";
ck_assert_int_eq(strncmp(empt, empt, 0), s21_strncmp(empt, empt, 0));

#test strncmp_test_empt_hello_5
char* empt = "";
char* hello = "hello";
ck_assert_int_ge(strncmp(empt, hello, 5), s21_strncmp(empt, hello, 5));

#test hello_empt_3
char* empt = "";
char* hello = "hello";
ck_assert_int_le(strncmp(hello, empt, 3), s21_strncmp(hello, empt, 3));


#test strncmp_test_abc_abd_3
char* abc = "abc";
char* abd = "abd";
ck_assert_int_ge(strncmp(abc, abd, 3), s21_strncmp(abc, abd, 3));

#test strncmp_test_hello_hellocopter_5
char* hello = "hello";
char* hellocopter = "hellocopter";
ck_assert_int_eq(strncmp(hello, hellocopter, 5), s21_strncmp(hello, hellocopter, 5));


#test hello_world_5
char* hello = "hello";
char* world = "world";
ck_assert_int_ge(strncmp(hello, world, 5), s21_strncmp(hello, world, 5));

#test strncmp_test_hello_helloworld_5
char* hello = "hello";
char* hello_world = "hello world";
ck_assert_int_eq(strncmp(hello, hello_world, 5), s21_strncmp(hello, hello_world, 5));

#test strncmp_test_uphello_hello_5
char* hello = "hello";
char* up_hello = "Hello";
ck_assert_int_ge(strncmp(up_hello, hello, 5), s21_strncmp(up_hello, hello, 5));


#test strncmp_test_hello_hellocopter_7
char* hello = "hello";
char* hellocopter = "hellocopter";
ck_assert_int_ge(strncmp(hello, hellocopter, 7), s21_strncmp(hello, hellocopter, 7));


#test memchr_first_char
char* string = "hello world";
char ch = 'h';
ck_assert_ptr_eq(string, s21_memchr(string, ch, 10));

#test memchr_o_char
char* string = "hello world";
char ch = 'o';
ck_assert_ptr_eq(memchr(string, ch, 10), s21_memchr(string, ch, 10));

#test memchr_space_char
char* string = "hello world ";
char ch = ' ';
ck_assert_ptr_eq(memchr(string, ch, 10), s21_memchr(string, ch, 10));

#test memchr_non_existing_char
char* string = "hello world ";
char ch = 's';
ck_assert_ptr_eq(memchr(string, ch, 10), s21_memchr(string, ch, 10));

#test memchr_out_of_range_char
char* string = "hello world ";
char ch = 'd';
ck_assert_ptr_eq(memchr(string, ch, 5), s21_memchr(string, ch, 5));


#test memcpy_hello
char* str1 = "hello";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memcpy_hell
char* str1 = "hell";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memcpy_haloo
char* str1 = "haloo";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memcpy_s21_0
char* str1 = "s21_0";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memcpy_abc
char* str1 = "abc";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memcpy_0qwert
char* str1 = "0qwert";
char* str2[20];
int n = strlen(str1) + 1;
ck_assert_int_eq(s21_memcmp(s21_memcpy(str2, str1, n), str1, n), 0);

#test memset_c0
char ch = 'c';
char* arr[20];
int n = 0;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_c3
char ch = 'c';
char* arr[20];
int n = 3;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_c20
char ch = 'c';
char* arr[20];
int n = 20;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_C0
char ch = 'C';
char* arr[20];
int n = 0;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_C3
char ch = 'C';
char* arr[20];
int n = 3;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_C20
char ch = 'C';
char* arr[20];
int n = 20;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_00
char ch = '0';
char* arr[20];
int n = 0;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_03
char ch = '0';
char* arr[20];
int n = 3;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memset_020
char ch = '0';
char* arr[20];
int n = 20;
ck_assert_int_eq(s21_memcmp(s21_memset(arr, ch, n), memset(arr, ch, n), n), 0);

#test memcmp_hello_hello

char* str1 = "hello";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hello_hell

char* str1 = "hello";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hello_haloo

char* str1 = "hello";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hello_s21_0

char* str1 = "hello";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hello_abc

char* str1 = "hello";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hello_0qwert

char* str1 = "hello";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_hello

char* str1 = "hell";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_hell

char* str1 = "hell";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_haloo

char* str1 = "hell";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_s21_0

char* str1 = "hell";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_abc

char* str1 = "hell";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_hell_0qwert

char* str1 = "hell";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_hello

char* str1 = "haloo";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_hell

char* str1 = "haloo";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_haloo

char* str1 = "haloo";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_s21_0

char* str1 = "haloo";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_abc

char* str1 = "haloo";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_haloo_0qwert

char* str1 = "haloo";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_hello

char* str1 = "s21_0";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_hell

char* str1 = "s21_0";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_haloo

char* str1 = "s21_0";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_s21_0

char* str1 = "s21_0";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_abc

char* str1 = "s21_0";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_s21_0_0qwert

char* str1 = "s21_0";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_hello

char* str1 = "abc";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_hell

char* str1 = "abc";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_haloo

char* str1 = "abc";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_s21_0

char* str1 = "abc";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_abc

char* str1 = "abc";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_abc_0qwert

char* str1 = "abc";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_hello

char* str1 = "0qwert";
char* str2 = "hello";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_hell

char* str1 = "0qwert";
char* str2 = "hell";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_haloo

char* str1 = "0qwert";
char* str2 = "haloo";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_s21_0

char* str1 = "0qwert";
char* str2 = "s21_0";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_abc

char* str1 = "0qwert";
char* str2 = "abc";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));

#test memcmp_0qwert_0qwert

char* str1 = "0qwert";
char* str2 = "0qwert";
int n = (strlen(str1) > strlen(str2) ? strlen(str1) : strlen(str1));
ck_assert_int_eq(memcmp(str1, str2, n), s21_memcmp(str1, str2, n));


#test sprintf_d_width
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%7d %lf %s %u, %c", 17, 123.5565655, "Hello", 55555, 'b');
s21_sprintf(str_two, "%7d %lf %s %u, %c", 17, 123.5565655, "Hello", 55555,'b');
ck_assert_str_eq(str_one, str_two);

#test print122
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.7d", -42);
s21_sprintf(str_two, "%.7d", -42);
ck_assert_str_eq(str_one, str_two);

#test print222
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.7d", -42856);
s21_sprintf(str_two, "%.7d", -42856);
ck_assert_str_eq(str_one, str_two);

#test print322
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-.5hd", -42);
s21_sprintf(str_two, "%-.5hd", -42);
ck_assert_str_eq(str_one, str_two);

#test print422
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.5d", -42);
s21_sprintf(str_two, "%.5d", -42);
ck_assert_str_eq(str_one, str_two);

#test print522
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.5s %c", "-42", 'g');
s21_sprintf(str_two, "%.5s %c", "-42", 'g');
ck_assert_str_eq(str_one, str_two);

#test print622
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%s %c %d", "-42", 'g', 34);
s21_sprintf(str_two, "%s %c %d", "-42", 'g', 34);
ck_assert_str_eq(str_one, str_two);

#test sprintf1
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%d %s %u, %c", 123, "Hello", 55555, 'b');
s21_sprintf(str_two, "%d %s %u, %c", 123,  "Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf2
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%d %f %s %u, %c", 123, 123.5565655, "Hello", 55555, 'b');
s21_sprintf(str_two, "%d %lf %s %u, %c", 123, 123.5565655, "Hello", 55555,'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf3
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%5d %5f %5s %5u, %5c", 123, 123.523455, "Hello", 55555,
        'b');
s21_sprintf(str_two, "%5d %5f %5s %5u, %5c", 123, 123.523455, "Hello",
            55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf4
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.5d %.5f %.5s %.5u, %c", 123, 123.523455, "Hello",
        55555, 'b');
s21_sprintf(str_two, "%.5d %.5f %.5s %.5u, %c", 123, 123.523455, "Hello",
            55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf5
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%ld %lf %s %lu, %lc", 12311111111, 123.523455, "hello©",
        12311111111, 'b');
s21_sprintf(str_two, "%ld %lf %s %lu, %lc", 12311111111, 123.523455, "hello©",
            12311111111, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf6
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%hd %f %s %hu, %c", 32000, 123.523455, "hello©", 33333,
        'b');
s21_sprintf(str_two, "%hd %f %s %hu, %c", 32000, 123.523455, "hello©", 33333,
            'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf7
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%hd %f %s %hu, %c", 32000, 12.345699, "hello©", 33333, 'b');
s21_sprintf(str_two, "%hd %f %s %hu, %c", 32000, 12.345699, "hello©", 33333,
            'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf8
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%hd %f %s %hu, %c", 32000, 12.345699, "hello©", 33333, 'b');
s21_sprintf(str_two, "%hd %f %s %hu, %c", 32000, 12.345699, "hello©", 33333,
            'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf9
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%hd %f %s %hu, %c", 0, 0.0, "hello©", 0, 0);
s21_sprintf(str_two, "%hd %f %s %hu, %c", 0, 0.0, "hello©", 0, 0);
ck_assert_str_eq(str_one, str_two);

#test sprintf10
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+d %+f %s %u, %c", 123, 123.5565555, "Hello", 55555, 'b');
s21_sprintf(str_two, "%+d %+f %s %u, %c", 123, 123.5565555, "Hello", 55555,
            'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf11
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-d %-f %-s %-u, %-c", 123, 123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "%-d %-f %-s %-u, %-c", 123, 123.5565555, "Hello", 55555,'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf12
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% d % f %s %u, %c", 123, 123.5565555, "Hello", 55555, 'b');
s21_sprintf(str_two, "% d % f %s %u, %c", 123, 123.5565555, "Hello", 55555,'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf13
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-9d %-9f %-9s %-9u, %-9c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%-9d %-9f %-9s %-9u, %-9c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf14
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 8d % 8f %s %u, %c", 123, 123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "% 8d % 8f %s %u, %c", 123, 123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf15
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 9d % 9f %s %u, %c", 123, 123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "% 9d % 9f %s %u, %c", 123, 123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf16
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 8d % 8f %s %u, %c", -123, -123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "% 8d % 8f %s %u, %c", -123, -123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf17
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+9d %+9f %s %u, %c", -123, -123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "%+9d %+9f %s %u, %c", -123, -123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf18
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-6d %-6f %s %u, %c", -123, -123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "%-6d %-6f %s %u, %c", -123, -123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf19
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%8.8d %8.8f %s %u, %c", -123, -123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%8.8d %8.8f %s %u, %c", -123, -123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf20
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%8.8d %8.8f %s %8.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%8.8d %8.8f %s %8.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf21
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%7.8d %7.8f %s %7.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%7.8d %7.8f %s %7.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf22
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%5.8d %5.8f %s %5.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%5.8d %5.8f %s %5.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf23
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%9.8d %9.8f %s %9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%9.8d %9.8f %s %9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf24
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-5.8d %-5.8f %s %-5.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%-5.8d %-5.8f %s %-5.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf25
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+9.8d %+9.8f %s %9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%+9.8d %+9.8f %s %9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf26
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+9.8d %+9.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%+9.8d %+9.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf27
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 8.8d % 8.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "% 8.8d % 8.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf28
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%9.8d %9.8f %s %9.8u, %c", -123, -123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%9.8d %9.8f %s %9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf29
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-9.8d %-9.8f %s %-9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%-9.8d %-9.8f %s %-9.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf30
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-9.8d %-9.8f %s %-9.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%-9.8d %-9.8f %s %-9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf31
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+9.8d %+9.8f %s %9.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%+9.8d %+9.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf32
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 9.8d % 9.8f %s %9.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "% 9.8d % 9.8f %s %9.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf33
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%8.8d %8.8f %s %8.8u, %c", -123, -123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%8.8d %8.8f %s %8.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf34
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-8.8d %-8.8f %s %-8.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
s21_sprintf(str_two, "%-8.8d %-8.8f %s %-8.8u, %c", -123, -123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf35
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-8.8d %-8.8f %s %-8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%-8.8d %-8.8f %s %-8.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf36
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%8.8d %8.8f %s %8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%8.8d %8.8f %s %8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf37
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%+8.8d %+8.8f %s %8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "%+8.8d %+8.8f %s %8.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf38
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "% 8.8d % 8.8f %s %8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
s21_sprintf(str_two, "% 8.8d % 8.8f %s %8.8u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf39
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%8.8d %.f %s %8.8u, %c", 123, 123.5565555, "Hello", 55555,'b');
s21_sprintf(str_two, "%8.8d %.f %s %8.8u, %c", 123, 123.5565555, "Hello",55555, 'b');
ck_assert_str_eq(str_one, str_two);

#test sprintf40
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.8f", 123.999999999);
s21_sprintf(str_two, "%.8f", 123.999999999);
ck_assert_str_eq(str_one, str_two);

#test sprintf41
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.6f", 123.999999999);
s21_sprintf(str_two, "%.6f", 123.999999999);
ck_assert_str_eq(str_one, str_two);

#test sprintf42
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.2f", 123.999999999);
s21_sprintf(str_two, "%.2f", 123.999999999);
ck_assert_str_eq(str_one, str_two);

#test sprintf43
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.f", 123.999999999);
s21_sprintf(str_two, "%.f", 123.999999999);
ck_assert_str_eq(str_one, str_two);

#test sprintf44
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.f", 123.5555555);
s21_sprintf(str_two, "%.f", 123.5555555);
ck_assert_str_eq(str_one, str_two);

#test sprintf45
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.f", 123.6666666);
s21_sprintf(str_two, "%.f", 123.6666666);
ck_assert_str_eq(str_one, str_two);

#test sprintf46
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%.f", 123.4564654);
s21_sprintf(str_two, "%.f", 123.4564654);
ck_assert_str_eq(str_one, str_two);


#test sprintf48
char str_one[100] = "";
char str_two[100] = "";
int a = sprintf(str_one, "% 9d % 9f %s %u, %c", 123, 123.5565555, "Hello",55555, 'b');
int b = s21_sprintf(str_two, "% 9d % 9f %s %u, %c", 123, 123.5565555,"Hello", 55555, 'b');
ck_assert_int_eq(a, b);

#test sprintf49
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%%");
s21_sprintf(str_two, "%%");
ck_assert_str_eq(str_one, str_two);

#test sprintf50
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%9.2f", 12.345);
s21_sprintf(str_two, "%9.2f", 12.345);
ck_assert_str_eq(str_one, str_two);

#test sprintf53
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-9f", 1.345);
s21_sprintf(str_two, "%-9f", 1.345);
ck_assert_str_eq(str_one, str_two);

#test sprintf51
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "v 9.2 hello");
s21_sprintf(str_two, "v 9.2 hello");
ck_assert_str_eq(str_one, str_two);

#test sprintf55
char str_one[100] = "";
char str_two[100] = "";
sprintf(str_one, "%-*d", -3, 34);
s21_sprintf(str_two, "%-*d", -3, 34);
ck_assert_str_eq(str_one, str_two);

#test sprintf56
char str_two[100] = "";
s21_sprintf(str_two, "%hy", -3, 34);
ck_assert_str_eq("", str_two);

#test test_s21_strrchr   
ck_assert_str_eq(s21_strrchr("Hello, World!", 'o'), strrchr("Hello, World!", 'o'));
ck_assert_ptr_eq(s21_strrchr("Hello, World!", 'x'), strrchr("Hello, World!", 'x'));
ck_assert_ptr_eq(s21_strrchr(s21_NULL, 'W'), s21_NULL);